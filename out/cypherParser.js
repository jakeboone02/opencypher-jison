/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var cypherParser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,27],$V1=[1,15],$V2=[1,31],$V3=[1,32],$V4=[1,33],$V5=[1,34],$V6=[1,35],$V7=[1,36],$V8=[1,28],$V9=[1,29],$Va=[1,30],$Vb=[6,7],$Vc=[1,39],$Vd=[1,45],$Ve=[1,46],$Vf=[1,47],$Vg=[1,48],$Vh=[1,49],$Vi=[1,50],$Vj=[1,51],$Vk=[1,52],$Vl=[6,7,13],$Vm=[1,58],$Vn=[2,12],$Vo=[1,66],$Vp=[21,24,32,34,40,41,43,57,64,65,68,70],$Vq=[6,7,13,21,24,32,34,40,41,43,57],$Vr=[1,75],$Vs=[1,77],$Vt=[1,88],$Vu=[1,93],$Vv=[6,7,13,21,24,32,34,40,41,43,46,49,55,57,64,65,67,68,69,70,103,115,123,124,129,130,133,139],$Vw=[78,79,80,81,82,83,84,85],$Vx=[1,105],$Vy=[1,106],$Vz=[6,7,13,21,24,32,34,40,41,43,46,57,64,65,67,68,70],$VA=[6,7,13,21,24,32,34,38,39,40,41,43,46,57,64,65,67,68,70],$VB=[6,7,13,21,24,32,34,38,39,40,41,43,46,57,64,65,67,68,70,140,141],$VC=[1,118],$VD=[1,119],$VE=[1,120],$VF=[1,124],$VG=[1,125],$VH=[1,127],$VI=[6,7,13,21,24,32,34,40,41,43,46,57,130],$VJ=[6,7,13,21,24,32,34,38,39,40,41,43,57],$VK=[6,7,13,21,24,32,34,40,41,43,46,57],$VL=[6,7,13,123,124],$VM=[6,7,13,115,123,124],$VN=[1,141],$VO=[6,7,13,46,115,123,124],$VP=[1,150],$VQ=[6,7,13,21,24,32,34,40,41,43,46,55,57,103,130,139],$VR=[1,183],$VS=[1,188],$VT=[1,182],$VU=[1,178],$VV=[1,165],$VW=[1,173],$VX=[1,169],$VY=[1,166],$VZ=[1,179],$V_=[1,177],$V$=[1,175],$V01=[1,172],$V11=[1,181],$V21=[1,184],$V31=[1,186],$V41=[1,198],$V51=[1,197],$V61=[1,196],$V71=[1,162],$V81=[1,163],$V91=[1,167],$Va1=[1,168],$Vb1=[1,180],$Vc1=[1,171],$Vd1=[1,161],$Ve1=[1,164],$Vf1=[1,170],$Vg1=[1,174],$Vh1=[1,176],$Vi1=[1,185],$Vj1=[1,187],$Vk1=[1,189],$Vl1=[1,190],$Vm1=[1,191],$Vn1=[1,192],$Vo1=[1,193],$Vp1=[1,194],$Vq1=[1,195],$Vr1=[1,199],$Vs1=[1,200],$Vt1=[1,201],$Vu1=[1,202],$Vv1=[1,203],$Vw1=[1,204],$Vx1=[1,205],$Vy1=[1,206],$Vz1=[1,207],$VA1=[1,208],$VB1=[1,209],$VC1=[1,210],$VD1=[1,211],$VE1=[1,212],$VF1=[1,213],$VG1=[21,24,32,34,40,41,43,46,57,64,65,67,68,70],$VH1=[21,24,32,34,40,41,43,57,64,65,68,70,72],$VI1=[6,7,13,124],$VJ1=[46,104],$VK1=[6,7,13,46,123,124];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"cypher":3,"statement":4,"semicolonOpt":5,"EOF":6,";":7,"query":8,"regularQuery":9,"standaloneCall":10,"singleQuery":11,"union":12,"UNION":13,"distinctOpt":14,"DISTINCT":15,"singlePartQuery":16,"multiPartQuery":17,"multiPartQueryClauseList":18,"multiPartQueryClause":19,"readingClauseList":20,"WITH":21,"updatingClauseList":22,"return":23,"RETURN":24,"projectionBody":25,"updatingClause":26,"create":27,"merge":28,"delete":29,"set":30,"remove":31,"CREATE":32,"pattern":33,"MERGE":34,"patternPart":35,"mergeActionList":36,"mergeAction":37,"ON_MATCH":38,"ON_CREATE":39,"DETACH":40,"DELETE":41,"expressionList":42,"SET":43,"Set":44,"setItemList":45,",":46,"setItem":47,"propertyExpression":48,"=":49,"expression":50,"variable":51,"+=":52,"nodeLabels":53,"nodeLabel":54,":":55,"schemaName":56,"REMOVE":57,"removeItemList":58,"removeItem":59,"readingClause":60,"match":61,"unwind":62,"inQueryCall":63,"OPTIONAL":64,"MATCH":65,"where":66,"WHERE":67,"UNWIND":68,"AS":69,"CALL":70,"explicitProcedureInvocation":71,"YIELD":72,"yieldItems":73,"yieldItem":74,"procedureResultField":75,"symbolicName":76,"anonymousPatternPart":77,"UNESCAPED_SYMBOLIC_NAME":78,"ESCAPED_SYMBOLIC_NAME":79,"COUNT":80,"FILTER":81,"EXTRACT":82,"ANY":83,"NONE":84,"SINGLE":85,"literal":86,"numberLiteral":87,"stringLiteral":88,"booleanLiteral":89,"NULL":90,"mapLiteral":91,"listLiteral":92,"doubleLiteral":93,"integerLiteral":94,"EXPONENT_DECIMAL_REAL":95,"REGULAR_DECIMAL_REAL":96,"HEX_INTEGER":97,"OCTAL_INTEGER":98,"DECIMAL_INTEGER":99,"STRING_LITERAL":100,"TRUE":101,"FALSE":102,"{":103,"}":104,"mapLiteralItemList":105,"mapLiteralItem":106,"propertyKeyName":107,"[":108,"]":109,"reservedWord":110,"projectionItems":111,"order":112,"skip":113,"limit":114,"ORDER_BY":115,"sortItemList":116,"sortItem":117,"sortDirectionOpt":118,"ASC":119,"ASCENDING":120,"DESC":121,"DESCENDING":122,"SKIP":123,"LIMIT":124,"*":125,"projectionItemList":126,"projectionItem":127,"procedureName":128,"(":129,")":130,"namespaces":131,"namespace":132,".":133,"patternElementChain":134,"relationshipPattern":135,"nodePattern":136,"properties":137,"parameter":138,"$":139,"LEFT_ARROW_HEAD":140,"DASH":141,"relationshipDetail":142,"RIGHT_ARROW_HEAD":143,"Expression":144,"PropertyExpression":145,"StandaloneCall":146,"ALL":147,"BY":148,"EXISTS":149,"ON":150,"ORDER":151,"AND":152,"CONTAINS":153,"ENDS":154,"IN":155,"IS":156,"NOT":157,"OR":158,"STARTS":159,"XOR":160,"CONSTRAINT":161,"DO":162,"FOR":163,"REQUIRE":164,"UNIQUE":165,"CASE":166,"WHEN":167,"THEN":168,"ELSE":169,"END":170,"MANDATORY":171,"SCALAR":172,"OF":173,"ADD":174,"DROP":175,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",7:";",13:"UNION",15:"DISTINCT",21:"WITH",24:"RETURN",32:"CREATE",34:"MERGE",38:"ON_MATCH",39:"ON_CREATE",40:"DETACH",41:"DELETE",43:"SET",44:"Set",46:",",49:"=",52:"+=",55:":",57:"REMOVE",64:"OPTIONAL",65:"MATCH",67:"WHERE",68:"UNWIND",69:"AS",70:"CALL",72:"YIELD",78:"UNESCAPED_SYMBOLIC_NAME",79:"ESCAPED_SYMBOLIC_NAME",80:"COUNT",81:"FILTER",82:"EXTRACT",83:"ANY",84:"NONE",85:"SINGLE",90:"NULL",95:"EXPONENT_DECIMAL_REAL",96:"REGULAR_DECIMAL_REAL",97:"HEX_INTEGER",98:"OCTAL_INTEGER",99:"DECIMAL_INTEGER",100:"STRING_LITERAL",101:"TRUE",102:"FALSE",103:"{",104:"}",108:"[",109:"]",115:"ORDER_BY",119:"ASC",120:"ASCENDING",121:"DESC",122:"DESCENDING",123:"SKIP",124:"LIMIT",125:"*",129:"(",130:")",133:".",139:"$",140:"LEFT_ARROW_HEAD",141:"DASH",143:"RIGHT_ARROW_HEAD",144:"Expression",145:"PropertyExpression",146:"StandaloneCall",147:"ALL",148:"BY",149:"EXISTS",150:"ON",151:"ORDER",152:"AND",153:"CONTAINS",154:"ENDS",155:"IN",156:"IS",157:"NOT",158:"OR",159:"STARTS",160:"XOR",161:"CONSTRAINT",162:"DO",163:"FOR",164:"REQUIRE",165:"UNIQUE",166:"CASE",167:"WHEN",168:"THEN",169:"ELSE",170:"END",171:"MANDATORY",172:"SCALAR",173:"OF",174:"ADD",175:"DROP"},
productions_: [0,[3,3],[5,1],[5,0],[4,1],[8,1],[8,1],[9,1],[9,1],[12,4],[12,4],[14,1],[14,0],[11,1],[11,1],[17,2],[18,2],[18,1],[19,2],[19,3],[19,2],[19,1],[16,1],[16,2],[16,2],[16,3],[16,1],[16,2],[23,2],[22,2],[22,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,2],[28,3],[36,2],[36,1],[37,2],[37,2],[29,3],[29,2],[30,2],[45,3],[45,1],[47,3],[47,3],[47,3],[47,2],[53,2],[53,1],[54,2],[31,2],[58,3],[58,1],[59,2],[59,1],[20,2],[20,1],[60,1],[60,1],[60,1],[61,3],[61,2],[61,4],[61,3],[66,2],[62,4],[63,2],[63,4],[63,5],[73,3],[73,1],[74,3],[75,1],[33,1],[33,3],[35,3],[35,1],[51,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[76,1],[86,1],[86,1],[86,1],[86,1],[86,1],[86,1],[87,1],[87,1],[93,1],[93,1],[94,1],[94,1],[94,1],[88,1],[89,1],[89,1],[91,2],[91,3],[105,3],[105,1],[106,3],[92,3],[42,3],[42,1],[107,1],[56,1],[56,1],[25,5],[112,2],[112,0],[116,3],[116,1],[117,2],[118,1],[118,1],[118,1],[118,1],[118,0],[113,2],[113,0],[114,2],[114,0],[111,1],[111,3],[111,1],[126,3],[126,1],[127,3],[127,1],[71,4],[71,3],[128,1],[128,2],[131,2],[131,1],[132,2],[77,1],[134,3],[134,1],[136,2],[136,3],[136,3],[136,4],[136,3],[136,4],[136,4],[136,5],[137,1],[137,1],[138,2],[138,2],[135,5],[135,4],[135,4],[135,3],[142,2],[50,1],[48,1],[10,2],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1],[110,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return { nodeType: 'Cypher', value: $$[$0-2], hasSemicolon: $$[$0-1] }; 
break;
case 2: case 11:
 this.$ = true 
break;
case 3: case 12:
 this.$ = false 
break;
case 4:
 this.$ = { nodeType: 'Statement', value: $$[$0] }; 
break;
case 5: case 6: case 8: case 13: case 14: case 31: case 32: case 33: case 34: case 35: case 61: case 62: case 63: case 94: case 95: case 96: case 97: case 114: case 157: case 158:
 this.$ = $$[$0] 
break;
case 7:
 this.$ = { type: 'SingleQuery', value: $$[$0] } 
break;
case 9: case 10:
 this.$ = { type: 'Union', left: $$[$0-3], distinctOpt: $$[$0-1], right: $$[$0] } 
break;
case 15:
 this.$ = { type: 'MultiPartQuery', value: $$[$01], clauses: $$[$0-1] } 
break;
case 16: case 38: case 51: case 143:
 this.$ = $$[$0-1]; $$[$0-1].value.push($$[$0]) 
break;
case 17:
 this.$ = { type: 'MultiPartQueryClauseList', value: [ $$[$0] ] } 
break;
case 18:
 this.$ = { type: 'MultiPartQueryClause', reading: $$[$0-1] } 
break;
case 19:
 this.$ = { type: 'MultiPartQueryClause', reading: $$[$0-2], updating: $$[$0-1] } 
break;
case 20:
 this.$ = { type: 'MultiPartQueryClause', updating: $$[$0-1] } 
break;
case 21:
 this.$ = { type: 'MultiPartQueryClause' } 
break;
case 22:
 this.$ = { type: 'SinglePartQuery', return: $$[$0] } 
break;
case 23:
 this.$ = { type: 'SinglePartQuery', reading: $$[$0-1], return: $$[$0] } 
break;
case 24:
 this.$ = { type: 'SinglePartQuery', updating: $$[$0-1], return: $$[$0] } 
break;
case 25:
 this.$ = { type: 'SinglePartQuery', reading: $$[$0-2], updating: $$[$0-1], return: $$[$0] } 
break;
case 26:
 this.$ = { type: 'SinglePartQuery', updating: $$[$0] } 
break;
case 27:
 this.$ = { type: 'SinglePartQuery', reading: $$[$0-1], updating: $$[$0] } 
break;
case 28:
 this.$ = { type: 'Return', value: $$[$0] } 
break;
case 29: case 59:
 this.$ = $$[$0-1]; $$[$0-1].value.push($$[$0]); 
break;
case 30:
 this.$ = { type: 'Updating', value: [ $$[$0] ] } 
break;
case 36:
 this.$ = { type: 'Create', value: $$[$0] } 
break;
case 37:
 this.$ = { type: 'Merge', pattern: $$[$0-1], actions: $$[$0] } 
break;
case 39:
 this.$ = { type: 'MergeActionList', value: [ $$[$0] ] } 
break;
case 40:
 this.$ = { type: 'MergeAction', on: 'MATCH', set: $$[$0] } 
break;
case 41:
 this.$ = { type: 'MergeAction', on: 'CREATE', set: $$[$0] } 
break;
case 42:
 this.$ = { type: 'Delete', detach: true, value: $$[$0] } 
break;
case 43:
 this.$ = { type: 'Delete', detach: false, value: $$[$0] } 
break;
case 44:
 this.$ = { type: 'Set', value: $$[$0] } 
break;
case 45:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0-1]) 
break;
case 46:
 this.$ = { type: 'SetItemList', value: [ $$[$0] ] } 
break;
case 47: case 48: case 49:
 this.$ = { type: 'SetItem', left: $$[$0-2], operator: $$[$0-1], right: $$[$0] } 
break;
case 50:
 this.$ = { type: 'SetItem', left: $$[$0-1], labels: $$[$0] } 
break;
case 52:
 this.$ = { type: 'NodeLabels', value: $$[$01] } 
break;
case 53:
 this.$ = { type: 'LabelName', value: $$[$0] } 
break;
case 54:
 this.$ = { type: 'Remove', value: $$[$0] } 
break;
case 55: case 73: case 108: case 112: case 120: case 135:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]) 
break;
case 56:
 this.$ = { type: 'RemoveItemList', value: [ $$[$0] ] } 
break;
case 57:
 this.$ = { type: 'RemoveItem', value: $$[$0-1], labels: $$[$0] } 
break;
case 58:
 this.$ = { type: 'RemoveItem', value: $$[$0] } 
break;
case 60:
 this.$ = { type: 'Reading', value: [ $$[$0] ] } 
break;
case 64:
 this.$ = { type: 'Match', optional: true, value: $$[$0], where: null } 
break;
case 65:
 this.$ = { type: 'Match', optional: false, value: $$[$0], where: null } 
break;
case 66:
 this.$ = { type: 'Match', optional: true, value: $$[$0-1], where: $$[$0] } 
break;
case 67:
 this.$ = { type: 'Match', optional: false, value: $$[$0-1], where: $$[$0] } 
break;
case 68:
 this.$ = { type: 'Where', value: $$[$0] } 
break;
case 69:
 this.$ = { type: 'Unwind', value: $$[$0-2], var: $$[$0] } 
break;
case 70:
 this.$ = { type: 'InQueryCall', procedure: $$[$0] } 
break;
case 71:
 this.$ = { type: 'InQueryCall', procedure: $$[$0-2], yield: $$[$0], where: null } 
break;
case 72:
 this.$ = { type: 'InQueryCall', procedure: $$[$0-3], yield: $$[$0-1], where: $$[$0] } 
break;
case 74:
 this.$ = { type: 'YieldItems', value: [ $$[$0] ] } 
break;
case 75:
 this.$ = { type: 'YieldItem', value: $$[$0-2], alias: $$[$0] } 
break;
case 76:
 this.$ = { type: 'ProcedureResultField', value: $$[$0] } 
break;
case 77:
 this.$ = { type: 'Pattern', value: [ $$[$0] ] } 
break;
case 78:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0]); 
break;
case 79:
 this.$ = { type: 'PatternPart', var: $$[$0-2], value: $$[$0] } 
break;
case 80: case 146:
 this.$ = { type: 'AnonymousPatternPart', value: $$[$0] } 
break;
case 81:
 this.$ = { type: 'Variable', value: $$[$0] } 
break;
case 82: case 83: case 84: case 85: case 86: case 87: case 88: case 89:
 this.$= { type: 'SymbolicName', value: $$[$0] } 
break;
case 90:
 this.$ = { type: 'NumberLiteral', value: $$[$0] } 
break;
case 91: case 103:
 this.$ = { type: 'StringLiteral', value: $$[$0] } 
break;
case 92:
 this.$ = { type: 'BooleanLiteral', value: $$[$0] } 
break;
case 93:
 this.$ = { type: 'NullLiteral' } 
break;
case 98:
 this.$ = { type: 'ExponentDecimalReal', value: $$[$0] } 
break;
case 99:
 this.$ = { type: 'RegularDecimalReal', value: $$[$0] } 
break;
case 100:
 this.$ = { type: 'HexInteger', value: $$[$0] } 
break;
case 101:
 this.$ = { type: 'OctalInteger', value: $$[$0] } 
break;
case 102:
 this.$ = { type: 'DecimalInteger', value: $$[$0] } 
break;
case 104:
 this.$ = { type: 'BooleanLiteral', value: true } 
break;
case 105:
 this.$ = { type: 'BooleanLiteral', value: false } 
break;
case 106:
 this.$ = { type: 'MapLiteral', value: [] } 
break;
case 107:
 this.$ = { type: 'MapLiteral', value: [ $$[$0-1] ] } 
break;
case 109:
 this.$ = { type: 'MapLiteralItemList', value: [ $$[$0] ] } 
break;
case 110:
 this.$ = { type: 'MapLiteralItem', prop: $$[$0-2], expr: $$[$0] } 
break;
case 111:
 this.$ = { type: 'ListLiteral', value: $$[$0-1] } 
break;
case 113:
 this.$ = { type: 'ExpressionList', value: [ $$[$0] ] } 
break;
case 115:
 this.$ = { type: 'SchemaName', value: $$[$0] } 
break;
case 116:
 this.$ = { type: 'ReservedWord', value: $$[$0] } 
break;
case 117:
 this.$ = { type: 'ProjectionBody', distinctOpt: $$[$0-4], items: $$[$0-3], order: $$[$0-2], skip: $$[$0-1], limit: $$[$0] } 
break;
case 118:
 this.$ = { type: 'Order', value: $$[$0] } 
break;
case 119: case 127: case 129: case 131:
 this.$ = null 
break;
case 121:
 this.$ = { type: 'SortItemList', value: [ $$[$0] ] } 
break;
case 122:
 this.$ = { type: 'SortItem', value: $$[$0-1], direction: $$[$0] } 
break;
case 123: case 124:
 this.$ = { type: 'SortDirection', value: $$[$0], asc: true } 
break;
case 125: case 126:
 this.$ = { type: 'SortDirection', value: $$[$0], asc: false } 
break;
case 128:
 this.$ = { type: 'Skip', value: $$[$0] } 
break;
case 130:
 this.$ = { type: 'Limit', value: $$[$0] } 
break;
case 132:
 this.$ = { type: 'ProjectionItems', value: [], beginsWithStar: true } 
break;
case 133:
 this.$ = { type: 'ProjectionItems', value: $$[$0], beginsWithStar: true } 
break;
case 134:
 this.$ = { type: 'ProjectionItems', value: $$[$0], beginsWithStar: false } 
break;
case 136:
 this.$ = { type: 'ProjectionItemList', value: [ $$[$0] ] } 
break;
case 137:
 this.$ = { type: 'ProjectionItem', value: $$[$0-2], var: $$[$0] } 
break;
case 138:
 this.$ = { type: 'ProjectionItem', value: $$[$0] } 
break;
case 139:
 this.$ = { type: 'ExplicitProcedureInvocation', procedure: $$[$0-3], params: $$[$0-1] } 
break;
case 140:
 this.$ = { type: 'ExplicitProcedureInvocation', procedure: $$[$0-2] } 
break;
case 141:
 this.$ = { type: 'ProcedureName', value: $$[$0] } 
break;
case 142:
 this.$ = { type: 'ProcedureName', value: $$[$0], namespaces: $$[$0-1] } 
break;
case 144:
 this.$ = { type: 'Namespaces', value: [ $$[$0] ] } 
break;
case 145:
 this.$ = { type: 'Namespace', value: $$[$0-1] } 
break;
case 147:
 this.$ = $$[$0-2]; $$[$0-2].value.push($$[$0-1], $$[$0]) 
break;
case 148:
 this.$ = { type: 'PatternElementChain', value: [ $$[$0] ] } 
break;
case 149:
 this.$ = { type: 'NodePattern', variable: null, labels: null, properties: null } 
break;
case 150:
 this.$ = { type: 'NodePattern', variable: $$[$0-1], labels: null, properties: null } 
break;
case 151:
 this.$ = { type: 'NodePattern', variable: null, labels: $$[$0-1], properties: null } 
break;
case 152:
 this.$ = { type: 'NodePattern', variable: $$[$0-2], labels: $$[$0-1], properties: null } 
break;
case 153:
 this.$ = { type: 'NodePattern', variable: null, labels: null, properties: $$[$0-1] } 
break;
case 154:
 this.$ = { type: 'NodePattern', variable: $$[$0-2], labels: null, properties: $$[$0-1] } 
break;
case 155:
 this.$ = { type: 'NodePattern', variable: null, labels: $$[$0-2], properties: $$[$0-1] } 
break;
case 156:
 this.$ = { type: 'NodePattern', variable: $$[$0-3], labels: $$[$0-2], properties: $$[$0-1] } 
break;
case 159: case 160:
 this.$ = { type: 'Parameter', value: $$[$0] } 
break;
case 161:
 this.$ = { type: 'RelationshipPattern', detail: $$[$0-2], hasLeftArrowHead: true, hasRightArrowHead: true } 
break;
case 162:
 this.$ = { type: 'RelationshipPattern', detail: $$[$0-1], hasLeftArrowHead: true, hasRightArrowHead: false } 
break;
case 163:
 this.$ = { type: 'RelationshipPattern', detail: $$[$0-2], hasLeftArrowHead: false, hasRightArrowHead: true } 
break;
case 164:
 this.$ = { type: 'RelationshipPattern', detail: $$[$0-1], hasLeftArrowHead: false, hasRightArrowHead: false } 
break;
case 165:
 this.$ = { type: 'RelationshipDetail', value: null } 
break;
case 166:
 this.$ = { type: 'Expression' } 
break;
case 167:
 this.$ = { type: 'PropertyExpression' } 
break;
case 168:
 this.$ = { type: 'StandaloneCall' } 
break;
}
},
table: [{3:1,4:2,8:3,9:4,10:5,11:6,12:7,16:9,17:10,18:14,19:18,20:12,21:$V0,22:13,23:11,24:$V1,26:17,27:22,28:23,29:24,30:25,31:26,32:$V2,34:$V3,40:$V4,41:$V5,43:$V6,57:$V7,60:16,61:19,62:20,63:21,64:$V8,65:$V9,68:$Va,70:[1,8]},{1:[3]},{5:37,6:[2,3],7:[1,38]},o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7],{13:$Vc}),o($Vb,[2,8]),{71:41,76:43,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,128:42,131:44,132:53,146:[1,40]},o($Vl,[2,13]),o($Vl,[2,14]),o($Vl,[2,22]),{21:[1,57],22:55,23:54,24:$V1,26:17,27:22,28:23,29:24,30:25,31:26,32:$V2,34:$V3,40:$V4,41:$V5,43:$V6,57:$V7,60:56,61:19,62:20,63:21,64:$V8,65:$V9,68:$Va,70:$Vm},o($Vl,[2,26],{27:22,28:23,29:24,30:25,31:26,23:59,26:60,21:[1,61],24:$V1,32:$V2,34:$V3,40:$V4,41:$V5,43:$V6,57:$V7}),{16:62,19:63,20:12,21:$V0,22:13,23:11,24:$V1,26:17,27:22,28:23,29:24,30:25,31:26,32:$V2,34:$V3,40:$V4,41:$V5,43:$V6,57:$V7,60:16,61:19,62:20,63:21,64:$V8,65:$V9,68:$Va,70:$Vm},o([125,144],$Vn,{25:64,14:65,15:$Vo}),o($Vp,[2,60]),o($Vq,[2,30]),o($Vp,[2,17]),o($Vp,[2,61]),o($Vp,[2,62]),o($Vp,[2,63]),o($Vq,[2,31]),o($Vq,[2,32]),o($Vq,[2,33]),o($Vq,[2,34]),o($Vq,[2,35]),o($Vp,[2,21]),{65:[1,67]},{33:68,35:69,51:70,76:72,77:71,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,129:$Vr,134:73,136:74},{50:76,144:$Vs},{33:78,35:69,51:70,76:72,77:71,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,129:$Vr,134:73,136:74},{35:79,51:70,76:72,77:71,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,129:$Vr,134:73,136:74},{41:[1,80]},{42:81,50:82,144:$Vs},{44:[1,83]},{48:87,51:86,58:84,59:85,76:72,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,145:$Vt},{6:[1,89]},{6:[2,2]},o($Vp,$Vn,{14:90,15:$Vo}),o($Vb,[2,168]),o($Vp,[2,70],{72:[1,91]}),{129:[1,92]},{129:[2,141],133:$Vu},{76:94,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,132:95},o($Vv,[2,82]),o($Vv,[2,83]),o($Vv,[2,84]),o($Vv,[2,85]),o($Vv,[2,86]),o($Vv,[2,87]),o($Vv,[2,88]),o($Vv,[2,89]),o($Vw,[2,144]),o($Vl,[2,23]),o($Vl,[2,27],{27:22,28:23,29:24,30:25,31:26,26:60,23:96,21:[1,97],24:$V1,32:$V2,34:$V3,40:$V4,41:$V5,43:$V6,57:$V7}),o($Vp,[2,59]),o($Vp,[2,18]),{71:41,76:43,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,128:42,131:44,132:53},o($Vl,[2,24]),o($Vq,[2,29]),o($Vp,[2,20]),o($Vl,[2,15]),o($Vp,[2,16]),o($Vl,[2,28]),{50:102,111:98,125:[1,99],126:100,127:101,144:$Vs},o([21,24,32,34,40,41,43,57,64,65,68,70,125,144],[2,11]),{33:103,35:69,51:70,76:72,77:71,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,129:$Vr,134:73,136:74},o($Vp,[2,65],{66:104,46:$Vx,67:$Vy}),o($Vz,[2,77]),{49:[1,107]},o($VA,[2,80]),o([6,7,13,21,24,32,34,40,41,43,46,49,55,57,64,65,67,68,70,103,115,123,124,130,139],[2,81]),o($VA,[2,146],{135:108,140:[1,109],141:[1,110]}),o($VB,[2,148]),{51:112,53:113,54:115,55:$VC,76:72,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,91:116,103:$VD,130:[1,111],137:114,138:117,139:$VE},{69:[1,121]},o([6,7,13,21,24,32,34,40,41,43,46,57,64,65,68,69,70,104,115,119,120,121,122,123,124,130],[2,166]),o($Vq,[2,36],{46:$Vx}),{36:122,37:123,38:$VF,39:$VG},{42:126,50:82,144:$Vs},o($Vq,[2,43],{46:$VH}),o($VI,[2,113]),o($VJ,[2,44]),o($Vq,[2,54],{46:[1,128]}),o($VK,[2,56]),{53:129,54:115,55:$VC},o($VK,[2,58]),o($VK,[2,167]),{1:[2,1]},{11:130,12:131,16:9,17:10,18:14,19:18,20:12,21:$V0,22:13,23:11,24:$V1,26:17,27:22,28:23,29:24,30:25,31:26,32:$V2,34:$V3,40:$V4,41:$V5,43:$V6,57:$V7,60:16,61:19,62:20,63:21,64:$V8,65:$V9,68:$Va,70:$Vm},{73:132,74:133,75:134,76:135,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{42:136,50:82,130:[1,137],144:$Vs},o($Vw,[2,145]),{129:[2,142],133:$Vu},o($Vw,[2,143]),o($Vl,[2,25]),o($Vp,[2,19]),o($VL,[2,119],{112:138,115:[1,139]}),o($VM,[2,132],{46:[1,140]}),o($VM,[2,134],{46:$VN}),o($VO,[2,136]),o($VO,[2,138],{69:[1,142]}),o($Vp,[2,64],{66:143,46:$Vx,67:$Vy}),o($Vp,[2,67]),{35:144,51:70,76:72,77:71,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,129:$Vr,134:73,136:74},{50:145,144:$Vs},{77:146,129:$Vr,134:73,136:74},{129:$Vr,136:147},{141:[1,148]},{108:$VP,142:149},o($VB,[2,149]),{53:152,54:115,55:$VC,91:116,103:$VD,130:[1,151],137:153,138:117,139:$VE},{54:156,55:$VC,91:116,103:$VD,130:[1,154],137:155,138:117,139:$VE},{130:[1,157]},o($VQ,[2,52]),{130:[2,157]},{130:[2,158]},{13:$VR,15:$VS,21:$VT,24:$VU,32:$VV,34:$VW,40:$VX,41:$VY,43:$VZ,56:158,57:$V_,64:$V$,65:$V01,67:$V11,68:$V21,69:$V31,76:159,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,90:$V41,101:$V51,102:$V61,110:160,119:$V71,120:$V81,121:$V91,122:$Va1,123:$Vb1,124:$Vc1,147:$Vd1,148:$Ve1,149:$Vf1,150:$Vg1,151:$Vh1,152:$Vi1,153:$Vj1,154:$Vk1,155:$Vl1,156:$Vm1,157:$Vn1,158:$Vo1,159:$Vp1,160:$Vq1,161:$Vr1,162:$Vs1,163:$Vt1,164:$Vu1,165:$Vv1,166:$Vw1,167:$Vx1,168:$Vy1,169:$Vz1,170:$VA1,171:$VB1,172:$VC1,173:$VD1,174:$VE1,175:$VF1},{13:$VR,15:$VS,21:$VT,24:$VU,32:$VV,34:$VW,40:$VX,41:$VY,43:$VZ,56:218,57:$V_,64:$V$,65:$V01,67:$V11,68:$V21,69:$V31,76:159,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,90:$V41,101:$V51,102:$V61,104:[1,214],105:215,106:216,107:217,110:160,119:$V71,120:$V81,121:$V91,122:$Va1,123:$Vb1,124:$Vc1,147:$Vd1,148:$Ve1,149:$Vf1,150:$Vg1,151:$Vh1,152:$Vi1,153:$Vj1,154:$Vk1,155:$Vl1,156:$Vm1,157:$Vn1,158:$Vo1,159:$Vp1,160:$Vq1,161:$Vr1,162:$Vs1,163:$Vt1,164:$Vu1,165:$Vv1,166:$Vw1,167:$Vx1,168:$Vy1,169:$Vz1,170:$VA1,171:$VB1,172:$VC1,173:$VD1,174:$VE1,175:$VF1},{76:219,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,99:[1,220]},{51:221,76:72,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vq,[2,37],{37:222,38:$VF,39:$VG}),o($VJ,[2,39]),{30:223,43:$V6},{30:224,43:$V6},o($Vq,[2,42],{46:$VH}),{50:225,144:$Vs},{48:87,51:86,59:226,76:72,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,145:$Vt},o($VK,[2,57],{54:156,55:$VC}),o($Vb,[2,9],{13:$Vc}),o($Vb,[2,10]),o($Vp,[2,71],{66:227,46:[1,228],67:$Vy}),o($VG1,[2,74]),{69:[1,229]},{69:[2,76]},{46:$VH,130:[1,230]},o($VH1,[2,140]),o($VI1,[2,129],{113:231,123:[1,232]}),{50:235,116:233,117:234,144:$Vs},{50:102,126:236,127:101,144:$Vs},{50:102,127:237,144:$Vs},{51:238,76:72,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($Vp,[2,66]),o($Vz,[2,78]),o($Vp,[2,68]),o($VA,[2,79]),o($VB,[2,147]),{108:$VP,142:239},{141:[1,240]},{109:[1,241]},o($VB,[2,150]),{54:156,55:$VC,91:116,103:$VD,130:[1,242],137:243,138:117,139:$VE},{130:[1,244]},o($VB,[2,151]),{130:[1,245]},o($VQ,[2,51]),o($VB,[2,153]),o($VQ,[2,53]),o($VQ,[2,115]),o($VQ,[2,116]),o($VQ,[2,169]),o($VQ,[2,170]),o($VQ,[2,171]),o($VQ,[2,172]),o($VQ,[2,173]),o($VQ,[2,174]),o($VQ,[2,175]),o($VQ,[2,176]),o($VQ,[2,177]),o($VQ,[2,178]),o($VQ,[2,179]),o($VQ,[2,180]),o($VQ,[2,181]),o($VQ,[2,182]),o($VQ,[2,183]),o($VQ,[2,184]),o($VQ,[2,185]),o($VQ,[2,186]),o($VQ,[2,187]),o($VQ,[2,188]),o($VQ,[2,189]),o($VQ,[2,190]),o($VQ,[2,191]),o($VQ,[2,192]),o($VQ,[2,193]),o($VQ,[2,194]),o($VQ,[2,195]),o($VQ,[2,196]),o($VQ,[2,197]),o($VQ,[2,198]),o($VQ,[2,199]),o($VQ,[2,200]),o($VQ,[2,201]),o($VQ,[2,202]),o($VQ,[2,203]),o($VQ,[2,204]),o($VQ,[2,205]),o($VQ,[2,206]),o($VQ,[2,207]),o($VQ,[2,208]),o($VQ,[2,209]),o($VQ,[2,210]),o($VQ,[2,211]),o($VQ,[2,212]),o($VQ,[2,213]),o($VQ,[2,214]),o($VQ,[2,215]),o($VQ,[2,216]),o($VQ,[2,217]),o($VQ,[2,218]),o($VQ,[2,219]),o($VQ,[2,220]),o($VQ,[2,221]),{130:[2,106]},{46:[1,247],104:[1,246]},o($VJ1,[2,109]),{55:[1,248]},{55:[2,114]},{130:[2,159]},{130:[2,160]},o($Vp,[2,69]),o($VJ,[2,38]),o($VJ,[2,40]),o($VJ,[2,41]),o($VI,[2,112]),o($VK,[2,55]),o($Vp,[2,72]),{74:249,75:134,76:135,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},{51:250,76:72,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk},o($VH1,[2,139]),o($Vl,[2,131],{114:251,124:[1,252]}),{50:253,144:$Vs},o($VL,[2,118],{46:[1,254]}),o($VK1,[2,121]),o($VK1,[2,127],{118:255,119:[1,256],120:[1,257],121:[1,258],122:[1,259]}),o($VM,[2,133],{46:$VN}),o($VO,[2,135]),o($VO,[2,137]),{141:[1,260]},{129:[2,164],143:[1,261]},{141:[2,165]},o($VB,[2,152]),{130:[1,262]},o($VB,[2,154]),o($VB,[2,155]),{130:[2,107]},{13:$VR,15:$VS,21:$VT,24:$VU,32:$VV,34:$VW,40:$VX,41:$VY,43:$VZ,56:218,57:$V_,64:$V$,65:$V01,67:$V11,68:$V21,69:$V31,76:159,78:$Vd,79:$Ve,80:$Vf,81:$Vg,82:$Vh,83:$Vi,84:$Vj,85:$Vk,90:$V41,101:$V51,102:$V61,106:263,107:217,110:160,119:$V71,120:$V81,121:$V91,122:$Va1,123:$Vb1,124:$Vc1,147:$Vd1,148:$Ve1,149:$Vf1,150:$Vg1,151:$Vh1,152:$Vi1,153:$Vj1,154:$Vk1,155:$Vl1,156:$Vm1,157:$Vn1,158:$Vo1,159:$Vp1,160:$Vq1,161:$Vr1,162:$Vs1,163:$Vt1,164:$Vu1,165:$Vv1,166:$Vw1,167:$Vx1,168:$Vy1,169:$Vz1,170:$VA1,171:$VB1,172:$VC1,173:$VD1,174:$VE1,175:$VF1},{50:264,144:$Vs},o($VG1,[2,73]),o($VG1,[2,75]),o($Vl,[2,117]),{50:265,144:$Vs},o($VI1,[2,128]),{50:235,117:266,144:$Vs},o($VK1,[2,122]),o($VK1,[2,123]),o($VK1,[2,124]),o($VK1,[2,125]),o($VK1,[2,126]),{129:[2,162],143:[1,267]},{129:[2,163]},o($VB,[2,156]),o($VJ1,[2,108]),o($VJ1,[2,110]),o($Vl,[2,130]),o($VK1,[2,120]),{129:[2,161]}],
defaultActions: {38:[2,2],89:[2,1],116:[2,157],117:[2,158],135:[2,76],214:[2,106],218:[2,114],219:[2,159],220:[2,160],241:[2,165],246:[2,107],261:[2,163],267:[2,161]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip comments */
break;
case 1:/* skip sql comments */
break;
case 2:/* skip whitespace */
break;
case 3:return 79
break;
case 4:return 78
break;
case 5:return 78
break;
case 6:return 147
break;
case 7:return 119
break;
case 8:return 120
break;
case 9:return 148
break;
case 10:return 32
break;
case 11:return 41
break;
case 12:return 121
break;
case 13:return 122
break;
case 14:return 40
break;
case 15:return 149
break;
case 16:return 124
break;
case 17:return 65
break;
case 18:return 34
break;
case 19:return 150
break;
case 20:return 39
break;
case 21:return 38
break;
case 22:return 64
break;
case 23:return 151
break;
case 24:return 57
break;
case 25:return 24
break;
case 26:return 43
break;
case 27:return 123
break;
case 28:return 67
break;
case 29:return 21
break;
case 30:return 13
break;
case 31:return 68
break;
case 32:return 152
break;
case 33:return 69
break;
case 34:return 153
break;
case 35:return 15
break;
case 36:return 154
break;
case 37:return 155
break;
case 38:return 156
break;
case 39:return 157
break;
case 40:return 158
break;
case 41:return 159
break;
case 42:return 160
break;
case 43:return 102
break;
case 44:return 101
break;
case 45:return 90
break;
case 46:return 161
break;
case 47:return 162
break;
case 48:return 163
break;
case 49:return 164
break;
case 50:return 165
break;
case 51:return 166
break;
case 52:return 167
break;
case 53:return 168
break;
case 54:return 169
break;
case 55:return 170
break;
case 56:return 171
break;
case 57:return 172
break;
case 58:return 173
break;
case 59:return 174
break;
case 60:return 175
break;
case 61:return 72
break;
case 62:return 70
break;
case 63:return 80
break;
case 64:return 81
break;
case 65:return 82
break;
case 66:return 83
break;
case 67:return 84
break;
case 68:return 85
break;
case 69:return 140
break;
case 70:return 143
break;
case 71:return 141
break;
case 72:return 46
break;
case 73:return 49
break;
case 74:return 129
break;
case 75:return 130
break;
case 76:return '~'
break;
case 77:return '!='
break;
case 78:return '!'
break;
case 79:return '|'
break;
case 80:return '&'
break;
case 81:return '+'
break;
case 82:return '-'
break;
case 83:return 125
break;
case 84:return '/'
break;
case 85:return '%'
break;
case 86:return '^'
break;
case 87:return '>>'
break;
case 88:return '>='
break;
case 89:return '>'
break;
case 90:return '<<'
break;
case 91:return '<=>'
break;
case 92:return '<='
break;
case 93:return '<>'
break;
case 94:return '<'
break;
case 95:return 103
break;
case 96:return 104
break;
case 97:return 7
break;
case 98:return 100
break;
case 99:return 100
break;
case 100:return 97
break;
case 101:return 98
break;
case 102:return 99
break;
case 103:return 99
break;
case 104:return 95
break;
case 105:return 96
break;
case 106:return 6
break;
}
},
rules: [/^(?:[/][*](.|\n)*?[*][/])/i,/^(?:[/][/].*\n)/i,/^(?:\s+)/i,/^(?:[`][a-zA-Z_\u4e00-\u9fa5][ a-zA-Z0-9_\u4e00-\u9fa5]*[`])/i,/^(?:[\w]+[\u4e00-\u9fa5]+[0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:[\u4e00-\u9fa5][0-9a-zA-Z_\u4e00-\u9fa5]*)/i,/^(?:ALL\b)/i,/^(?:ASC\b)/i,/^(?:ASCENDING\b)/i,/^(?:BY\b)/i,/^(?:CREATE\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DESCENDING\b)/i,/^(?:DETACH\b)/i,/^(?:EXISTS\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCH\b)/i,/^(?:MERGE\b)/i,/^(?:ON\b)/i,/^(?:ON\s+CREATE\b)/i,/^(?:ON\s+MATCH\b)/i,/^(?:OPTIONAL\b)/i,/^(?:ORDER\b)/i,/^(?:REMOVE\b)/i,/^(?:RETURN\b)/i,/^(?:SET\b)/i,/^(?:SKIP\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:UNION\b)/i,/^(?:UNWIND\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:CONTAINS\b)/i,/^(?:DISTINCT\b)/i,/^(?:ENDS\b)/i,/^(?:IN\b)/i,/^(?:IS\b)/i,/^(?:NOT\b)/i,/^(?:OR\b)/i,/^(?:STARTS\b)/i,/^(?:XOR\b)/i,/^(?:FALSE\b)/i,/^(?:TRUE\b)/i,/^(?:NULL\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:DO\b)/i,/^(?:FOR\b)/i,/^(?:REQUIRE\b)/i,/^(?:UNIQUE\b)/i,/^(?:CASE\b)/i,/^(?:WHEN\b)/i,/^(?:THEN\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:MANDATORY\b)/i,/^(?:SCALAR\b)/i,/^(?:OF\b)/i,/^(?:ADD\b)/i,/^(?:DROP\b)/i,/^(?:YIELD\b)/i,/^(?:CALL\b)/i,/^(?:COUNT\b)/i,/^(?:FILTER\b)/i,/^(?:EXTRACT\b)/i,/^(?:ANY\b)/i,/^(?:NONE\b)/i,/^(?:SINGLE\b)/i,/^(?:[<⟨〈﹤＜])/i,/^(?:[>⟩〉﹥＞])/i,/^(?:[-­‐‑‒–—―−﹘﹣－])/i,/^(?:,)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:\|)/i,/^(?:&)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>>)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<<)/i,/^(?:<=>)/i,/^(?:<=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:;)/i,/^(?:['](\\.|[^'])*['])/i,/^(?:["](\\.|[^"])*["])/i,/^(?:0[x][0-9a-fA-F]+)/i,/^(?:0[0-7]+)/i,/^(?:0\b)/i,/^(?:[1-9][0-9]*)/i,/^(?:[-]?[0-9]*(\.[0-9]+)?[eE][-]?[0-9]+(\.[0-9]+)?)/i,/^(?:[-]?[0-9]*(\.[0-9]+)+)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = cypherParser;
exports.Parser = cypherParser.Parser;
exports.parse = function () { return cypherParser.parse.apply(cypherParser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}